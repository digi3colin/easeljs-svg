{"version":3,"sources":["easeljs-svg-path.jsx"],"names":["resolveRepeateCommand","commands","lens","a","c","h","l","m","q","s","t","v","z","result","forEach","command","cmd","toLowerCase","len","push","args","splice","length","Error","setCount","i","subArgs","slice","concat","parse","pathString","match","map","x","parseFloat","toString","join","pathBounds","absoluteCommands","points","y","j","minX","Number","POSITIVE_INFINITY","minY","maxX","NEGATIVE_INFINITY","maxY","pt","abs","startX","startY","seg","type","toUpperCase","drawGraphics","graphics","scale","arg","test","bounds","cx","cy","b","a2c","bt","lt","mt","qt","cp","TAU","Math","PI","unit_vector_angle","ux","uy","vx","vy","sign","dot","acos","get_arc_center","x1","y1","x2","y2","fa","fs","rx","ry","sin_phi","cos_phi","x1p","y1p","rx_sq","ry_sq","x1p_sq","y1p_sq","radicant","sqrt","cxp","cyp","v1x","v1y","v2x","v2y","theta1","delta_theta","approximate_unit_arc","alpha","tan","cos","sin","phi","lambda","cc","segments","max","ceil","curve","xp","yp"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;iBAyBc;AACZA,IAAAA,qBADY,iCACUC,QADV,EACmB;AAC7B,UAAMC,IAAI,GAAG;AAACC,QAAAA,CAAC,EAAE,CAAJ;AAAOC,QAAAA,CAAC,EAAE,CAAV;AAAaC,QAAAA,CAAC,EAAE,CAAhB;AAAmBC,QAAAA,CAAC,EAAE,CAAtB;AAAyBC,QAAAA,CAAC,EAAE,CAA5B;AAA+BC,QAAAA,CAAC,EAAE,CAAlC;AAAqCC,QAAAA,CAAC,EAAE,CAAxC;AAA2CC,QAAAA,CAAC,EAAE,CAA9C;AAAiDC,QAAAA,CAAC,EAAE,CAApD;AAAuDC,QAAAA,CAAC,EAAE;AAA1D,OAAb;AACA,UAAMC,MAAM,GAAG,EAAf;AAEAZ,MAAAA,QAAQ,CAACa,OAAT,CAAiB,UAAAC,OAAO,EAAI;AAC1B,YAAMC,GAAG,GAAGD,OAAO,CAAC,CAAD,CAAP,CAAWE,WAAX,EAAZ;AACA,YAAMC,GAAG,GAAGhB,IAAI,CAACc,GAAD,CAAhB;AACA,YAAGE,GAAG,KAAK,CAAX,EAAa,OAAOL,MAAM,CAACM,IAAP,CAAYJ,OAAZ,CAAP;AAEb,YAAMK,IAAI,GAAGL,OAAO,CAACM,MAAR,CAAe,CAAf,CAAb;;AAEA,YAAGD,IAAI,CAACE,MAAL,GAAcJ,GAAd,KAAsB,CAAzB,EAA4B;AAC1B,gBAAM,IAAIK,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAED,YAAMC,QAAQ,GAAGJ,IAAI,CAACE,MAAL,GAAcJ,GAA/B;;AAEA,aAAI,IAAIO,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,QAAnB,EAA6BC,CAAC,EAA9B,EAAiC;AAC/B,cAAMC,OAAO,GAAGN,IAAI,CAACO,KAAL,CAAWF,CAAC,GAAGP,GAAf,EAAoBO,CAAC,GAAGP,GAAJ,GAAUA,GAA9B,CAAhB;AACAL,UAAAA,MAAM,CAACM,IAAP,CAAY,CAACJ,OAAO,CAAC,CAAD,CAAR,EAAaa,MAAb,CAAoBF,OAApB,CAAZ;AACD;AACF,OAjBD;AAmBA,aAAOb,MAAP;AACD,KAzBW;AA2BZgB,IAAAA,KA3BY,iBA2BNC,UA3BM,EA2BK;AACf,aAAO,KAAK9B,qBAAL,CACL8B,UAAU,CACTC,KADD,CACO,kCADP,EAECC,GAFD,CAEK,UAAAjB,OAAO;AAAA,eAAI,CAACA,OAAO,CAACY,KAAR,CAAc,CAAd,EAAgB,CAAhB,CAAD,EAAqBZ,OAAO,CAACgB,KAAR,CAAc,mCAAd,CAArB,CAAJ;AAAA,OAFZ,EAGCC,GAHD,CAGK,UAAAjB,OAAO;AAAA,eAAI,CAACA,OAAO,CAAC,CAAD,CAAR,EAAaa,MAAb,CAAqBb,OAAO,CAAC,CAAD,CAAP,KAAe,IAAhB,GAAwBA,OAAO,CAAC,CAAD,CAAP,CAAWiB,GAAX,CAAe,UAAAC,CAAC;AAAA,iBAAIC,UAAU,CAACD,CAAD,CAAd;AAAA,SAAhB,CAAxB,GAA4D,EAAhF,CAAJ;AAAA,OAHZ,CADK,CAAP;AAMD,KAlCW;AAoCZE,IAAAA,QApCY,oBAoCHlC,QApCG,EAoCM;AAChB,aAAOA,QAAQ,CACZ+B,GADI,CACA,UAAAhB,GAAG;AAAA,eAAIA,GAAG,CAACoB,IAAJ,CAAS,GAAT,CAAJ;AAAA,OADH,EAEJA,IAFI,CAEC,GAFD,CAAP;AAGD,KAxCW;AA0CZC,IAAAA,UA1CY,sBA0CDC,gBA1CC,EA0CiB;AAC3B,UAAIC,MAAM,GAAG,EAAb;AACA,UAAIN,CAAJ;AAAA,UAAOO,CAAC,GAAG,CAAX;AAEAF,MAAAA,gBAAgB,CAACxB,OAAjB,CAAyB,UAAAE,GAAG,EAAI;AAC9B,gBAAOA,GAAG,CAAC,CAAD,CAAV;AACE,eAAK,GAAL;AACEiB,YAAAA,CAAC,GAAGjB,GAAG,CAAC,CAAD,CAAP;AACAuB,YAAAA,MAAM,CAACpB,IAAP,CAAY,CAACc,CAAD,EAAIO,CAAJ,CAAZ;AACA;;AACF,eAAK,GAAL;AACEA,YAAAA,CAAC,GAAGxB,GAAG,CAAC,CAAD,CAAP;AACAuB,YAAAA,MAAM,CAACpB,IAAP,CAAY,CAACc,CAAD,EAAIO,CAAJ,CAAZ;AACA;;AACF,eAAK,GAAL;AACEP,YAAAA,CAAC,GAAGjB,GAAG,CAAC,CAAD,CAAP;AACAwB,YAAAA,CAAC,GAAGxB,GAAG,CAAC,CAAD,CAAP;AACAuB,YAAAA,MAAM,CAACpB,IAAP,CAAY,CAACc,CAAD,EAAIO,CAAJ,CAAZ;AACA;;AACF,eAAK,GAAL;AACED,YAAAA,MAAM,CAACpB,IAAP,CAAY,CAACH,GAAG,CAAC,CAAD,CAAJ,EAASA,GAAG,CAAC,CAAD,CAAZ,CAAZ;AACAuB,YAAAA,MAAM,CAACpB,IAAP,CAAY,CAACH,GAAG,CAAC,CAAD,CAAJ,EAASA,GAAG,CAAC,CAAD,CAAZ,CAAZ;AAEAiB,YAAAA,CAAC,GAAGjB,GAAG,CAAC,CAAD,CAAP;AACAwB,YAAAA,CAAC,GAAGxB,GAAG,CAAC,CAAD,CAAP;AACAuB,YAAAA,MAAM,CAACpB,IAAP,CAAY,CAACc,CAAD,EAAIO,CAAJ,CAAZ;AACA;;AACF,eAAK,GAAL;AACA,eAAK,GAAL;AACEP,YAAAA,CAAC,GAAGjB,GAAG,CAAC,CAAD,CAAP;AACAwB,YAAAA,CAAC,GAAGxB,GAAG,CAAC,CAAD,CAAP;AACAuB,YAAAA,MAAM,CAACpB,IAAP,CAAY,CAACc,CAAD,EAAIO,CAAJ,CAAZ;AACA;;AACF,eAAK,GAAL;AACEP,YAAAA,CAAC,GAAGjB,GAAG,CAAC,CAAD,CAAP;AACAwB,YAAAA,CAAC,GAAGxB,GAAG,CAAC,CAAD,CAAP;AACAuB,YAAAA,MAAM,CAACpB,IAAP,CAAY,CAACc,CAAD,EAAIO,CAAJ,CAAZ;AACA;;AAEF;AACE,iBAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGzB,GAAG,CAACM,MAAvB,EAAgCmB,CAAC,IAAI,CAArC,EAAuC;AACrCR,cAAAA,CAAC,GAAGjB,GAAG,CAACyB,CAAD,CAAP;AACAD,cAAAA,CAAC,GAAGxB,GAAG,CAACyB,CAAC,GAAC,CAAH,CAAP;AACAF,cAAAA,MAAM,CAACpB,IAAP,CAAY,CAACc,CAAD,EAAIO,CAAJ,CAAZ;AACD;;AAvCL;AAyCD,OA1CD;AA4CA,UAAIE,IAAI,GAAGC,MAAM,CAACC,iBAAlB;AACA,UAAIC,IAAI,GAAGF,MAAM,CAACC,iBAAlB;AACA,UAAIE,IAAI,GAAGH,MAAM,CAACI,iBAAlB;AACA,UAAIC,IAAI,GAAGL,MAAM,CAACI,iBAAlB;AAEAR,MAAAA,MAAM,CAACzB,OAAP,CAAe,UAAAmC,EAAE,EAAI;AACnB,YAAGP,IAAI,GAAGO,EAAE,CAAC,CAAD,CAAZ,EAAgBP,IAAI,GAAGO,EAAE,CAAC,CAAD,CAAT;AAChB,YAAGJ,IAAI,GAAGI,EAAE,CAAC,CAAD,CAAZ,EAAgBJ,IAAI,GAAGI,EAAE,CAAC,CAAD,CAAT;AAChB,YAAGH,IAAI,GAAGG,EAAE,CAAC,CAAD,CAAZ,EAAgBH,IAAI,GAAGG,EAAE,CAAC,CAAD,CAAT;AAChB,YAAGD,IAAI,GAAGC,EAAE,CAAC,CAAD,CAAZ,EAAgBD,IAAI,GAAGC,EAAE,CAAC,CAAD,CAAT;AACjB,OALD;AAOA,aAAO,CAACP,IAAD,EAAOG,IAAP,EAAaC,IAAI,GAAGJ,IAApB,EAA0BM,IAAI,GAAGH,IAAjC,EAAuCN,MAAvC,CAAP;AACD,KAvGW;AAyGd;AACA;AACEW,IAAAA,GA3GY,eA2GRjD,QA3GQ,EA2GC;AACX,UAAIkD,MAAJ;AAAA,UAAYC,MAAZ;AAAA,UAAoBnB,CAApB;AAAA,UAAuBO,CAAC,GAAG,CAA3B;AAEA,aAAOvC,QAAQ,CAAC+B,GAAT,CAAa,UAAAqB,GAAG,EAAI;AACzBA,QAAAA,GAAG,GAAGA,GAAG,CAAC1B,KAAJ,EAAN;AACA,YAAM2B,IAAI,GAAGD,GAAG,CAAC,CAAD,CAAhB;AACA,YAAMtC,OAAO,GAAGuC,IAAI,CAACC,WAAL,EAAhB,CAHyB,CAKzB;;AACA,YAAID,IAAI,KAAKvC,OAAb,EAAsB;AACpBsC,UAAAA,GAAG,CAAC,CAAD,CAAH,GAAStC,OAAT;;AACA,kBAAQuC,IAAR;AACE,iBAAK,GAAL;AACED,cAAAA,GAAG,CAAC,CAAD,CAAH,IAAUpB,CAAV;AACAoB,cAAAA,GAAG,CAAC,CAAD,CAAH,IAAUb,CAAV;AACA;;AACF,iBAAK,GAAL;AACIa,cAAAA,GAAG,CAAC,CAAD,CAAH,IAAUpB,CAAV;AACA;;AACJ,iBAAK,GAAL;AACEoB,cAAAA,GAAG,CAAC,CAAD,CAAH,IAAUb,CAAV;AACA;;AACF;AACE,mBAAK,IAAIf,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4B,GAAG,CAAC/B,MAAxB,GAAiC;AAC/B+B,gBAAAA,GAAG,CAAC5B,CAAC,EAAF,CAAH,IAAYQ,CAAZ;AACAoB,gBAAAA,GAAG,CAAC5B,CAAC,EAAF,CAAH,IAAYe,CAAZ;AACD;;AAfL;AAiBD,SAzBwB,CA2BzB;;;AACA,gBAAQzB,OAAR;AACE,eAAK,GAAL;AACEkB,YAAAA,CAAC,GAAGoB,GAAG,CAAC,CAAD,CAAP;AACAb,YAAAA,CAAC,GAAGa,GAAG,CAAC,CAAD,CAAP;AACA;;AACF,eAAK,GAAL;AACEpB,YAAAA,CAAC,GAAGkB,MAAJ;AACAX,YAAAA,CAAC,GAAGY,MAAJ;AACA;;AACF,eAAK,GAAL;AACEnB,YAAAA,CAAC,GAAGoB,GAAG,CAAC,CAAD,CAAP;AACA;;AACF,eAAK,GAAL;AACEb,YAAAA,CAAC,GAAGa,GAAG,CAAC,CAAD,CAAP;AACA;;AACF,eAAK,GAAL;AACEpB,YAAAA,CAAC,GAAGkB,MAAM,GAAGE,GAAG,CAAC,CAAD,CAAhB;AACAb,YAAAA,CAAC,GAAGY,MAAM,GAAGC,GAAG,CAAC,CAAD,CAAhB;AACA;;AACF;AACEpB,YAAAA,CAAC,GAAGoB,GAAG,CAACA,GAAG,CAAC/B,MAAJ,GAAa,CAAd,CAAP;AACAkB,YAAAA,CAAC,GAAGa,GAAG,CAACA,GAAG,CAAC/B,MAAJ,GAAa,CAAd,CAAP;AArBJ;;AAwBA,eAAO+B,GAAP;AACD,OArDM,CAAP;AAsDD,KApKW;AAsKZG,IAAAA,YAtKY,wBAsKCC,QAtKD,EAsKW3B,UAtKX,EAsK+B;AAAA,UAAR4B,KAAQ,uEAAF,CAAE;AACzC,UAAIzD,QAAQ,GAAG,KAAKiD,GAAL,CAAS,KAAKrB,KAAL,CAAWC,UAAX,CAAT,CAAf;;AACA,UAAG4B,KAAK,KAAK,CAAb,EAAe;AACbzD,QAAAA,QAAQ,GAAGA,QAAQ,CAAC+B,GAAT,CAAa,UAAAhB,GAAG;AAAA,iBAAIA,GAAG,CAACgB,GAAJ,CAAQ,UAAC2B,GAAD,EAAMlC,CAAN,EAAY;AACjD,gBAAGA,CAAC,KAAK,CAAT,EAAY,OAAOkC,GAAP,CADqC,CAEjD;;AACA,gBAAG,KAAKC,IAAL,CAAU5C,GAAG,CAAC,CAAD,CAAb,MAAsBS,CAAC,KAAK,CAAN,IAAWA,CAAC,KAAK,CAAjB,IAAsBA,CAAC,KAAK,CAAlD,CAAH,EAAyD,OAAOkC,GAAP;AAEzD,mBAAOA,GAAG,GAAGD,KAAb;AACD,WAN8B,CAAJ;AAAA,SAAhB,CAAX;AAOD;;AAED,UAAIG,MAAM,GAAG,KAAKxB,UAAL,CAAgBpC,QAAhB,CAAb;AAEA,UAAIgC,CAAJ;AAAA,UAAOO,CAAP;AAAA,UAAUsB,EAAV;AAAA,UAAcC,EAAE,GAAG,CAAnB;AACA9D,MAAAA,QAAQ,CAACa,OAAT,CAAiB,UAAAE,GAAG,EAAI;AACtB,gBAAOA,GAAG,CAAC,CAAD,CAAV;AACE,eAAK,GAAL;AAEE,gBAAMgD,CAAC,GAAGC,GAAG,CAAChC,CAAD,EAAIO,CAAJ,EAAOxB,GAAG,CAAC,CAAD,CAAV,EAAeA,GAAG,CAAC,CAAD,CAAlB,EAAuBA,GAAG,CAAC,CAAD,CAA1B,EAA+BA,GAAG,CAAC,CAAD,CAAlC,EAAsCA,GAAG,CAAC,CAAD,CAAzC,EAA8CA,GAAG,CAAC,CAAD,CAAjD,EAAsDA,GAAG,CAAC,CAAD,CAAzD,CAAb;AACAgD,YAAAA,CAAC,CAAClD,OAAF,CAAU,UAAAmB,CAAC,EAAG;AACZwB,cAAAA,QAAQ,CAACS,EAAT,CAAYjC,CAAC,CAAC,CAAD,CAAb,EAAiBA,CAAC,CAAC,CAAD,CAAlB,EAAsBA,CAAC,CAAC,CAAD,CAAvB,EAA2BA,CAAC,CAAC,CAAD,CAA5B,EAAgCA,CAAC,CAAC,CAAD,CAAjC,EAAqCA,CAAC,CAAC,CAAD,CAAtC;AACD,aAFD;AAIAA,YAAAA,CAAC,GAAGjB,GAAG,CAAC,CAAD,CAAP;AACAwB,YAAAA,CAAC,GAAGxB,GAAG,CAAC,CAAD,CAAP;AAEA;;AACF,eAAK,GAAL;AACEyC,YAAAA,QAAQ,CAACS,EAAT,CAAYlD,GAAG,CAAC,CAAD,CAAf,EAAoBA,GAAG,CAAC,CAAD,CAAvB,EAA4BA,GAAG,CAAC,CAAD,CAA/B,EAAoCA,GAAG,CAAC,CAAD,CAAvC,EAA4CA,GAAG,CAAC,CAAD,CAA/C,EAAoDA,GAAG,CAAC,CAAD,CAAvD;AACAiB,YAAAA,CAAC,GAAGjB,GAAG,CAAC,CAAD,CAAP;AACAwB,YAAAA,CAAC,GAAGxB,GAAG,CAAC,CAAD,CAAP;AACA8C,YAAAA,EAAE,GAAG9C,GAAG,CAAC,CAAD,CAAR;AACA+C,YAAAA,EAAE,GAAG/C,GAAG,CAAC,CAAD,CAAR;AACA;;AACF,eAAK,GAAL;AACEyC,YAAAA,QAAQ,CAACU,EAAT,CAAYnD,GAAG,CAAC,CAAD,CAAf,EAAoBwB,CAApB;AACAP,YAAAA,CAAC,GAAGjB,GAAG,CAAC,CAAD,CAAP;AACA;;AACF,eAAK,GAAL;AACEyC,YAAAA,QAAQ,CAACU,EAAT,CAAYnD,GAAG,CAAC,CAAD,CAAf,EAAoBA,GAAG,CAAC,CAAD,CAAvB;AACAiB,YAAAA,CAAC,GAAGjB,GAAG,CAAC,CAAD,CAAP;AACAwB,YAAAA,CAAC,GAAGxB,GAAG,CAAC,CAAD,CAAP;AACA;;AACF,eAAK,GAAL;AACEyC,YAAAA,QAAQ,CAACW,EAAT,CAAYpD,GAAG,CAAC,CAAD,CAAf,EAAoBA,GAAG,CAAC,CAAD,CAAvB;AACAiB,YAAAA,CAAC,GAAGjB,GAAG,CAAC,CAAD,CAAP;AACAwB,YAAAA,CAAC,GAAGxB,GAAG,CAAC,CAAD,CAAP;AACA;;AACF,eAAK,GAAL;AACEyC,YAAAA,QAAQ,CAACY,EAAT,CAAYrD,GAAG,CAAC,CAAD,CAAf,EAAoBA,GAAG,CAAC,CAAD,CAAvB,EAA4BA,GAAG,CAAC,CAAD,CAA/B,EAAoCA,GAAG,CAAC,CAAD,CAAvC;AACAiB,YAAAA,CAAC,GAAGjB,GAAG,CAAC,CAAD,CAAP;AACAwB,YAAAA,CAAC,GAAGxB,GAAG,CAAC,CAAD,CAAP;AACA8C,YAAAA,EAAE,GAAG9C,GAAG,CAAC,CAAD,CAAR;AACA+C,YAAAA,EAAE,GAAG/C,GAAG,CAAC,CAAD,CAAR;AACA;;AACF,eAAK,GAAL;AACE8C,YAAAA,EAAE,GAAG7B,CAAC,IAAIA,CAAC,GAAG6B,EAAR,CAAN;AACAC,YAAAA,EAAE,GAAGvB,CAAC,IAAIA,CAAC,GAAGuB,EAAR,CAAN;AAEAN,YAAAA,QAAQ,CAACS,EAAT,CAAYJ,EAAZ,EAAgBC,EAAhB,EAAoB/C,GAAG,CAAC,CAAD,CAAvB,EAA4BA,GAAG,CAAC,CAAD,CAA/B,EAAoCA,GAAG,CAAC,CAAD,CAAvC,EAA4CA,GAAG,CAAC,CAAD,CAA/C;AACAiB,YAAAA,CAAC,GAAGjB,GAAG,CAAC,CAAD,CAAP;AACAwB,YAAAA,CAAC,GAAGxB,GAAG,CAAC,CAAD,CAAP;AACA8C,YAAAA,EAAE,GAAG9C,GAAG,CAAC,CAAD,CAAR;AACA+C,YAAAA,EAAE,GAAG/C,GAAG,CAAC,CAAD,CAAR;AACA;;AACF,eAAK,GAAL;AACE8C,YAAAA,EAAE,GAAG7B,CAAC,IAAIA,CAAC,GAAG6B,EAAR,CAAN;AACAC,YAAAA,EAAE,GAAGvB,CAAC,IAAIA,CAAC,GAAGuB,EAAR,CAAN;AAEAN,YAAAA,QAAQ,CAACY,EAAT,CAAYP,EAAZ,EAAgBC,EAAhB,EAAoB/C,GAAG,CAAC,CAAD,CAAvB,EAA4BA,GAAG,CAAC,CAAD,CAA/B;AACAiB,YAAAA,CAAC,GAAGjB,GAAG,CAAC,CAAD,CAAP;AACAwB,YAAAA,CAAC,GAAGxB,GAAG,CAAC,CAAD,CAAP;AAEA;;AACF,eAAK,GAAL;AACEyC,YAAAA,QAAQ,CAACU,EAAT,CAAYlC,CAAZ,EAAejB,GAAG,CAAC,CAAD,CAAlB;AACAwB,YAAAA,CAAC,GAAGxB,GAAG,CAAC,CAAD,CAAP;AACA;;AACF,eAAK,GAAL;AACEyC,YAAAA,QAAQ,CAACa,EAAT;AAhEJ;AAkED,OAnED;AAqEA,aAAO;AAACb,QAAAA,QAAQ,EAAEA,QAAX;AAAqBI,QAAAA,MAAM,EAAEA;AAA7B,OAAP;AACD;AA3PW,G;AA+Pd;AAEA;AACA;;;AACA,MAAMU,GAAG,GAAGC,IAAI,CAACC,EAAL,GAAU,CAAtB;AAEA;AAEA;AACA;AACA;AACA;AACA;;AACA,WAASC,iBAAT,CAA2BC,EAA3B,EAA+BC,EAA/B,EAAmCC,EAAnC,EAAuCC,EAAvC,EAA2C;AACvC,QAAMC,IAAI,GAAIJ,EAAE,GAAGG,EAAL,GAAUF,EAAE,GAAGC,EAAf,GAAoB,CAArB,GAA0B,CAAC,CAA3B,GAA+B,CAA5C;AACA,QAAIG,GAAG,GAAIL,EAAE,GAAGE,EAAL,GAAUD,EAAE,GAAGE,EAA1B,CAFuC,CAIvC;AACA;AAEA;;AACA,QAAIE,GAAG,GAAI,GAAX,EAAgB;AAAEA,MAAAA,GAAG,GAAI,GAAP;AAAa;;AAC/B,QAAIA,GAAG,GAAG,CAAC,GAAX,EAAgB;AAAEA,MAAAA,GAAG,GAAG,CAAC,GAAP;AAAa;;AAE/B,WAAOD,IAAI,GAAGP,IAAI,CAACS,IAAL,CAAUD,GAAV,CAAd;AACH,G,CAGD;AACA;AACA;AACA;AACA;;;AACA,WAASE,cAAT,CAAwBC,EAAxB,EAA4BC,EAA5B,EAAgCC,EAAhC,EAAoCC,EAApC,EAAwCC,EAAxC,EAA4CC,EAA5C,EAAgDC,EAAhD,EAAoDC,EAApD,EAAwDC,OAAxD,EAAiEC,OAAjE,EAA0E;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,QAAMC,GAAG,GAAID,OAAO,IAAET,EAAE,GAACE,EAAL,CAAP,GAAgB,CAAhB,GAAoBM,OAAO,IAAEP,EAAE,GAACE,EAAL,CAAP,GAAgB,CAAjD;AACA,QAAMQ,GAAG,GAAG,CAACH,OAAD,IAAUR,EAAE,GAACE,EAAb,IAAiB,CAAjB,GAAqBO,OAAO,IAAER,EAAE,GAACE,EAAL,CAAP,GAAgB,CAAjD;AAEA,QAAMS,KAAK,GAAKN,EAAE,GAAGA,EAArB;AACA,QAAMO,KAAK,GAAKN,EAAE,GAAGA,EAArB;AACA,QAAMO,MAAM,GAAGJ,GAAG,GAAGA,GAArB;AACA,QAAMK,MAAM,GAAGJ,GAAG,GAAGA,GAArB,CAbsE,CAetE;AACA;AACA;AACA;AACA;;AACA,QAAIK,QAAQ,GAAIJ,KAAK,GAAGC,KAAT,GAAmBD,KAAK,GAAGG,MAA3B,GAAsCF,KAAK,GAAGC,MAA7D;;AAEA,QAAIE,QAAQ,GAAG,CAAf,EAAkB;AACd;AACAA,MAAAA,QAAQ,GAAG,CAAX;AACH;;AAEDA,IAAAA,QAAQ,IAAOJ,KAAK,GAAGG,MAAT,GAAoBF,KAAK,GAAGC,MAA1C;AACAE,IAAAA,QAAQ,GAAG3B,IAAI,CAAC4B,IAAL,CAAUD,QAAV,KAAuBZ,EAAE,KAAKC,EAAP,GAAY,CAAC,CAAb,GAAiB,CAAxC,CAAX;AAEA,QAAMa,GAAG,GAAGF,QAAQ,GAAIV,EAAZ,GAAeC,EAAf,GAAoBI,GAAhC;AACA,QAAMQ,GAAG,GAAGH,QAAQ,GAAG,CAACT,EAAZ,GAAeD,EAAf,GAAoBI,GAAhC,CA/BsE,CAiCtE;AACA;AACA;AACA;AACA;;AACA,QAAM/B,EAAE,GAAG8B,OAAO,GAACS,GAAR,GAAcV,OAAO,GAACW,GAAtB,GAA4B,CAACnB,EAAE,GAACE,EAAJ,IAAQ,CAA/C;AACA,QAAMtB,EAAE,GAAG4B,OAAO,GAACU,GAAR,GAAcT,OAAO,GAACU,GAAtB,GAA4B,CAAClB,EAAE,GAACE,EAAJ,IAAQ,CAA/C,CAvCsE,CAyCtE;AACA;AACA;AACA;;AACA,QAAMiB,GAAG,GAAI,CAACV,GAAG,GAAGQ,GAAP,IAAcZ,EAA3B;AACA,QAAMe,GAAG,GAAI,CAACV,GAAG,GAAGQ,GAAP,IAAcZ,EAA3B;AACA,QAAMe,GAAG,GAAG,CAAC,CAACZ,GAAD,GAAOQ,GAAR,IAAeZ,EAA3B;AACA,QAAMiB,GAAG,GAAG,CAAC,CAACZ,GAAD,GAAOQ,GAAR,IAAeZ,EAA3B;AAEA,QAAMiB,MAAM,GAAGjC,iBAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO6B,GAAP,EAAYC,GAAZ,CAAhC;AACA,QAAII,WAAW,GAAGlC,iBAAiB,CAAC6B,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,GAAhB,CAAnC;;AAEA,QAAIlB,EAAE,KAAK,CAAP,IAAYoB,WAAW,GAAG,CAA9B,EAAiC;AAC7BA,MAAAA,WAAW,IAAIrC,GAAf;AACH;;AACD,QAAIiB,EAAE,KAAK,CAAP,IAAYoB,WAAW,GAAG,CAA9B,EAAiC;AAC7BA,MAAAA,WAAW,IAAIrC,GAAf;AACH;;AAED,WAAO,CAAET,EAAF,EAAMC,EAAN,EAAU4C,MAAV,EAAkBC,WAAlB,CAAP;AACH,G,CAED;AACA;AACA;AACA;;;AACA,WAASC,oBAAT,CAA8BF,MAA9B,EAAsCC,WAAtC,EAAmD;AAC/C,QAAME,KAAK,GAAG,IAAE,CAAF,GAAMtC,IAAI,CAACuC,GAAL,CAASH,WAAW,GAAC,CAArB,CAApB;AAEA,QAAMzB,EAAE,GAAGX,IAAI,CAACwC,GAAL,CAASL,MAAT,CAAX;AACA,QAAMvB,EAAE,GAAGZ,IAAI,CAACyC,GAAL,CAASN,MAAT,CAAX;AACA,QAAMtB,EAAE,GAAGb,IAAI,CAACwC,GAAL,CAASL,MAAM,GAAGC,WAAlB,CAAX;AACA,QAAMtB,EAAE,GAAGd,IAAI,CAACyC,GAAL,CAASN,MAAM,GAAGC,WAAlB,CAAX;AAEA,WAAO,CAAEzB,EAAF,EAAMC,EAAN,EAAUD,EAAE,GAAGC,EAAE,GAAC0B,KAAlB,EAAyB1B,EAAE,GAAGD,EAAE,GAAC2B,KAAjC,EAAwCzB,EAAE,GAAGC,EAAE,GAACwB,KAAhD,EAAuDxB,EAAE,GAAGD,EAAE,GAACyB,KAA/D,EAAsEzB,EAAtE,EAA0EC,EAA1E,CAAP;AACH;;AAED,WAASrB,GAAT,CAAakB,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB,EAA6BC,EAA7B,EAAiCC,EAAjC,EAAqCC,EAArC,EAAyCC,EAAzC,EAA6CwB,GAA7C,EAAkD;AAC9C,QAAMvB,OAAO,GAAGnB,IAAI,CAACyC,GAAL,CAASC,GAAG,GAAG3C,GAAN,GAAY,GAArB,CAAhB;AACA,QAAMqB,OAAO,GAAGpB,IAAI,CAACwC,GAAL,CAASE,GAAG,GAAG3C,GAAN,GAAY,GAArB,CAAhB,CAF8C,CAI9C;AACA;;AACA,QAAMsB,GAAG,GAAID,OAAO,IAAET,EAAE,GAACE,EAAL,CAAP,GAAgB,CAAhB,GAAoBM,OAAO,IAAEP,EAAE,GAACE,EAAL,CAAP,GAAgB,CAAjD;AACA,QAAMQ,GAAG,GAAG,CAACH,OAAD,IAAUR,EAAE,GAACE,EAAb,IAAiB,CAAjB,GAAqBO,OAAO,IAAER,EAAE,GAACE,EAAL,CAAP,GAAgB,CAAjD;;AAEA,QAAIO,GAAG,KAAK,CAAR,IAAaC,GAAG,KAAK,CAAzB,EAA4B;AACxB;AACA,aAAO,EAAP;AACH;;AAED,QAAIL,EAAE,KAAK,CAAP,IAAYC,EAAE,KAAK,CAAvB,EAA0B;AACtB;AACA,aAAO,EAAP;AACH,KAjB6C,CAoB9C;AACA;;;AACAD,IAAAA,EAAE,GAAGjB,IAAI,CAACtB,GAAL,CAASuC,EAAT,CAAL;AACAC,IAAAA,EAAE,GAAGlB,IAAI,CAACtB,GAAL,CAASwC,EAAT,CAAL;AAEA,QAAMyB,MAAM,GAAItB,GAAG,GAAGA,GAAP,IAAeJ,EAAE,GAAGA,EAApB,IAA2BK,GAAG,GAAGA,GAAP,IAAeJ,EAAE,GAAGA,EAApB,CAAzC;;AACA,QAAIyB,MAAM,GAAG,CAAb,EAAgB;AACZ1B,MAAAA,EAAE,IAAIjB,IAAI,CAAC4B,IAAL,CAAUe,MAAV,CAAN;AACAzB,MAAAA,EAAE,IAAIlB,IAAI,CAAC4B,IAAL,CAAUe,MAAV,CAAN;AACH,KA7B6C,CAgC9C;AACA;;;AACA,QAAMC,EAAE,GAAGlC,cAAc,CAACC,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB,EAA6BC,EAA7B,EAAiCC,OAAjC,EAA0CC,OAA1C,CAAzB;AAEA,QAAM/E,MAAM,GAAG,EAAf;AACA,QAAI8F,MAAM,GAAGS,EAAE,CAAC,CAAD,CAAf;AACA,QAAIR,WAAW,GAAGQ,EAAE,CAAC,CAAD,CAApB,CAtC8C,CAwC9C;AACA;AACA;;AACA,QAAMC,QAAQ,GAAG7C,IAAI,CAAC8C,GAAL,CAAS9C,IAAI,CAAC+C,IAAL,CAAU/C,IAAI,CAACtB,GAAL,CAAS0D,WAAT,KAAyBrC,GAAG,GAAG,CAA/B,CAAV,CAAT,EAAuD,CAAvD,CAAjB;AACAqC,IAAAA,WAAW,IAAIS,QAAf;;AAEA,SAAK,IAAI5F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4F,QAApB,EAA8B5F,CAAC,EAA/B,EAAmC;AAC/BZ,MAAAA,MAAM,CAACM,IAAP,CAAY0F,oBAAoB,CAACF,MAAD,EAASC,WAAT,CAAhC;AACAD,MAAAA,MAAM,IAAIC,WAAV;AACH,KAjD6C,CAmD9C;AACA;AACA;;;AACA,WAAO/F,MAAM,CAACmB,GAAP,CAAW,UAAUwF,KAAV,EAAiB;AAC/B,WAAK,IAAI/F,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAG+F,KAAK,CAAClG,MAA1B,EAAkCG,EAAC,IAAI,CAAvC,EAA0C;AACtC,YAAIQ,CAAC,GAAGuF,KAAK,CAAC/F,EAAD,CAAb;AACA,YAAIe,CAAC,GAAGgF,KAAK,CAAC/F,EAAC,GAAG,CAAL,CAAb,CAFsC,CAItC;;AACAQ,QAAAA,CAAC,IAAIwD,EAAL;AACAjD,QAAAA,CAAC,IAAIkD,EAAL,CANsC,CAQtC;;AACA,YAAM+B,EAAE,GAAG7B,OAAO,GAAC3D,CAAR,GAAY0D,OAAO,GAACnD,CAA/B;AACA,YAAMkF,EAAE,GAAG/B,OAAO,GAAC1D,CAAR,GAAY2D,OAAO,GAACpD,CAA/B,CAVsC,CAYtC;;AACAgF,QAAAA,KAAK,CAAC/F,EAAD,CAAL,GAAegG,EAAE,GAAGL,EAAE,CAAC,CAAD,CAAtB;AACAI,QAAAA,KAAK,CAAC/F,EAAC,GAAG,CAAL,CAAL,GAAeiG,EAAE,GAAGN,EAAE,CAAC,CAAD,CAAtB;AACH;;AAED,aAAOI,KAAP;AACH,KAnBM,CAAP;AAoBH","sourcesContent":["/**\nCopyright (c) 2018 Colin Leung\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n**/\n\n/* easeljs-svg-path use function a2c , a2c is part of svgpath\nhttps://github.com/fontello/svgpath\n* */\n/**\n (The MIT License)\n\n Copyright (C) 2013-2015 by Vitaly Puzrin\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n\n**/\n\nexport default{\n  resolveRepeateCommand(commands){\n    const lens = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0};\n    const result = [];\n\n    commands.forEach(command => {\n      const cmd = command[0].toLowerCase();\n      const len = lens[cmd];\n      if(len === 0)return result.push(command);\n\n      const args = command.splice(1);\n\n      if(args.length % len !== 0 ){\n        throw new Error('SVG path command argument number mismatch');\n      }\n\n      const setCount = args.length / len;\n\n      for(let i = 0; i < setCount; i++){\n        const subArgs = args.slice(i * len, i * len + len);\n        result.push([command[0]].concat(subArgs));\n      }\n    });\n\n    return result;\n  },\n\n  parse(pathString){\n    return this.resolveRepeateCommand(\n      pathString\n      .match(/([astvzqmhlc])([^astvzqmhlc]*)/ig)\n      .map(command => [command.slice(0,1), command.match(/-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig)])\n      .map(command => [command[0]].concat((command[1] !== null) ? command[1].map(x => parseFloat(x)): []))\n    );\n  },\n\n  toString(commands){\n    return commands\n      .map(cmd => cmd.join(' '))\n      .join(' ');\n  },\n\n  pathBounds(absoluteCommands) {\n    let points = [];\n    let x, y = 0;\n\n    absoluteCommands.forEach(cmd => {\n      switch(cmd[0]){\n        case 'H':\n          x = cmd[1];\n          points.push([x, y]);\n          break;\n        case 'V':\n          y = cmd[1];\n          points.push([x, y]);\n          break;\n        case 'A':\n          x = cmd[6];\n          y = cmd[7];\n          points.push([x, y]);\n          break;\n        case 'C':\n          points.push([cmd[1], cmd[2]]);\n          points.push([cmd[3], cmd[4]]);\n\n          x = cmd[5];\n          y = cmd[6];\n          points.push([x, y]);\n          break;\n        case 'S':\n        case 'Q':\n          x = cmd[3];\n          y = cmd[4];\n          points.push([x, y]);\n          break;\n        case 'T':\n          x = cmd[1];\n          y = cmd[2];\n          points.push([x, y]);\n          break;\n\n        default:\n          for(let j = 1; j < cmd.length ; j += 2){\n            x = cmd[j];\n            y = cmd[j+1];\n            points.push([x, y]);\n          }\n      }\n    });\n\n    let minX = Number.POSITIVE_INFINITY;\n    let minY = Number.POSITIVE_INFINITY;\n    let maxX = Number.NEGATIVE_INFINITY;\n    let maxY = Number.NEGATIVE_INFINITY;\n\n    points.forEach(pt => {\n      if(minX > pt[0])minX = pt[0];\n      if(minY > pt[1])minY = pt[1];\n      if(maxX < pt[0])maxX = pt[0];\n      if(maxY < pt[1])maxY = pt[1];\n    });\n\n    return [minX, minY, maxX - minX, maxY - minY, points];\n  },\n\n//abs-svg-path\n//    const lens = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0};\n  abs(commands){\n    let startX, startY, x, y = 0;\n\n    return commands.map(seg => {\n      seg = seg.slice();\n      const type = seg[0];\n      const command = type.toUpperCase();\n\n      // is relative\n      if (type !== command) {\n        seg[0] = command;\n        switch (type) {\n          case 'a':\n            seg[6] += x;\n            seg[7] += y;\n            break;\n          case 'h':\n              seg[1] += x;\n              break;\n          case 'v':\n            seg[1] += y;\n            break;\n          default:\n            for (let i = 1; i < seg.length;) {\n              seg[i++] += x;\n              seg[i++] += y;\n            }\n        }\n      }\n\n      // update cursor state\n      switch (command) {\n        case 'A':\n          x = seg[6];\n          y = seg[7];\n          break;\n        case 'Z':\n          x = startX;\n          y = startY;\n          break;\n        case 'H':\n          x = seg[1];\n          break;\n        case 'V':\n          y = seg[1];\n          break;\n        case 'M':\n          x = startX = seg[1];\n          y = startY = seg[2];\n          break;\n        default:\n          x = seg[seg.length - 2];\n          y = seg[seg.length - 1];\n      }\n\n      return seg\n    })\n  },\n\n  drawGraphics(graphics, pathString, scale=1){\n    let commands = this.abs(this.parse(pathString));\n    if(scale !== 1){\n      commands = commands.map(cmd => cmd.map((arg, i) => {\n        if(i === 0) return arg;\n        //do not scale flags and angle in Arc\n        if(/a/i.test(cmd[0]) && (i === 3 || i === 4 || i === 5)) return arg;\n\n        return arg * scale;\n      }));\n    }\n\n    let bounds = this.pathBounds(commands);\n\n    let x, y, cx, cy = 0;\n    commands.forEach(cmd => {\n      switch(cmd[0]){\n        case 'A':\n\n          const b = a2c(x, y, cmd[6], cmd[7], cmd[4], cmd[5],cmd[1], cmd[2], cmd[3]);\n          b.forEach(x =>{\n            graphics.bt(x[2],x[3],x[4],x[5],x[6],x[7])\n          });\n\n          x = cmd[6];\n          y = cmd[7];\n\n          break;\n        case 'C':\n          graphics.bt(cmd[1], cmd[2], cmd[3], cmd[4], cmd[5], cmd[6]);\n          x = cmd[5];\n          y = cmd[6];\n          cx = cmd[3];\n          cy = cmd[4];\n          break;\n        case 'H':\n          graphics.lt(cmd[1], y);\n          x = cmd[1];\n          break;\n        case 'L':\n          graphics.lt(cmd[1], cmd[2]);\n          x = cmd[1];\n          y = cmd[2];\n          break;\n        case 'M':\n          graphics.mt(cmd[1], cmd[2]);\n          x = cmd[1];\n          y = cmd[2];\n          break;\n        case 'Q':\n          graphics.qt(cmd[1], cmd[2], cmd[3], cmd[4]);\n          x = cmd[3];\n          y = cmd[4];\n          cx = cmd[1];\n          cy = cmd[2];\n          break;\n        case 'S':\n          cx = x + (x - cx);\n          cy = y + (y - cy);\n\n          graphics.bt(cx, cy, cmd[1], cmd[2], cmd[3], cmd[4]);\n          x = cmd[3];\n          y = cmd[4];\n          cx = cmd[1];\n          cy = cmd[2];\n          break;\n        case 'T':\n          cx = x + (x - cx);\n          cy = y + (y - cy);\n\n          graphics.qt(cx, cy, cmd[1], cmd[2]);\n          x = cmd[1];\n          y = cmd[2];\n\n          break;\n        case 'V':\n          graphics.lt(x, cmd[1]);\n          y = cmd[1];\n          break;\n        case 'Z':\n          graphics.cp();\n      }\n    });\n\n    return {graphics: graphics, bounds: bounds};\n  }\n}\n\n\n/* code from Project SVGPATH */\n\n// Convert an arc to a sequence of cubic bézier curves\n//\nconst TAU = Math.PI * 2;\n\n/* eslint-disable space-infix-ops */\n\n// Calculate an angle between two unit vectors\n//\n// Since we measure angle between radii of circular arcs,\n// we can use simplified math (without length normalization)\n//\nfunction unit_vector_angle(ux, uy, vx, vy) {\n    const sign = (ux * vy - uy * vx < 0) ? -1 : 1;\n    let dot  = ux * vx + uy * vy;\n\n    // Add this to work with arbitrary vectors:\n    // dot /= Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n\n    // rounding errors, e.g. -1.0000000000000002 can screw up this\n    if (dot >  1.0) { dot =  1.0; }\n    if (dot < -1.0) { dot = -1.0; }\n\n    return sign * Math.acos(dot);\n}\n\n\n// Convert from endpoint to center parameterization,\n// see http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n//\n// Return [cx, cy, theta1, delta_theta]\n//\nfunction get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi) {\n    // Step 1.\n    //\n    // Moving an ellipse so origin will be the middlepoint between our two\n    // points. After that, rotate it to line up ellipse axes with coordinate\n    // axes.\n    //\n    const x1p =  cos_phi*(x1-x2)/2 + sin_phi*(y1-y2)/2;\n    const y1p = -sin_phi*(x1-x2)/2 + cos_phi*(y1-y2)/2;\n\n    const rx_sq  =  rx * rx;\n    const ry_sq  =  ry * ry;\n    const x1p_sq = x1p * x1p;\n    const y1p_sq = y1p * y1p;\n\n    // Step 2.\n    //\n    // Compute coordinates of the centre of this ellipse (cx', cy')\n    // in the new coordinate system.\n    //\n    let radicant = (rx_sq * ry_sq) - (rx_sq * y1p_sq) - (ry_sq * x1p_sq);\n\n    if (radicant < 0) {\n        // due to rounding errors it might be e.g. -1.3877787807814457e-17\n        radicant = 0;\n    }\n\n    radicant /=   (rx_sq * y1p_sq) + (ry_sq * x1p_sq);\n    radicant = Math.sqrt(radicant) * (fa === fs ? -1 : 1);\n\n    const cxp = radicant *  rx/ry * y1p;\n    const cyp = radicant * -ry/rx * x1p;\n\n    // Step 3.\n    //\n    // Transform back to get centre coordinates (cx, cy) in the original\n    // coordinate system.\n    //\n    const cx = cos_phi*cxp - sin_phi*cyp + (x1+x2)/2;\n    const cy = sin_phi*cxp + cos_phi*cyp + (y1+y2)/2;\n\n    // Step 4.\n    //\n    // Compute angles (theta1, delta_theta).\n    //\n    const v1x =  (x1p - cxp) / rx;\n    const v1y =  (y1p - cyp) / ry;\n    const v2x = (-x1p - cxp) / rx;\n    const v2y = (-y1p - cyp) / ry;\n\n    const theta1 = unit_vector_angle(1, 0, v1x, v1y);\n    let delta_theta = unit_vector_angle(v1x, v1y, v2x, v2y);\n\n    if (fs === 0 && delta_theta > 0) {\n        delta_theta -= TAU;\n    }\n    if (fs === 1 && delta_theta < 0) {\n        delta_theta += TAU;\n    }\n\n    return [ cx, cy, theta1, delta_theta ];\n}\n\n//\n// Approximate one unit arc segment with bézier curves,\n// see http://math.stackexchange.com/questions/873224\n//\nfunction approximate_unit_arc(theta1, delta_theta) {\n    const alpha = 4/3 * Math.tan(delta_theta/4);\n\n    const x1 = Math.cos(theta1);\n    const y1 = Math.sin(theta1);\n    const x2 = Math.cos(theta1 + delta_theta);\n    const y2 = Math.sin(theta1 + delta_theta);\n\n    return [ x1, y1, x1 - y1*alpha, y1 + x1*alpha, x2 + y2*alpha, y2 - x2*alpha, x2, y2 ];\n}\n\nfunction a2c(x1, y1, x2, y2, fa, fs, rx, ry, phi) {\n    const sin_phi = Math.sin(phi * TAU / 360);\n    const cos_phi = Math.cos(phi * TAU / 360);\n\n    // Make sure radii are valid\n    //\n    const x1p =  cos_phi*(x1-x2)/2 + sin_phi*(y1-y2)/2;\n    const y1p = -sin_phi*(x1-x2)/2 + cos_phi*(y1-y2)/2;\n\n    if (x1p === 0 && y1p === 0) {\n        // we're asked to draw line to itself\n        return [];\n    }\n\n    if (rx === 0 || ry === 0) {\n        // one of the radii is zero\n        return [];\n    }\n\n\n    // Compensate out-of-range radii\n    //\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n\n    const lambda = (x1p * x1p) / (rx * rx) + (y1p * y1p) / (ry * ry);\n    if (lambda > 1) {\n        rx *= Math.sqrt(lambda);\n        ry *= Math.sqrt(lambda);\n    }\n\n\n    // Get center parameters (cx, cy, theta1, delta_theta)\n    //\n    const cc = get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi);\n\n    const result = [];\n    let theta1 = cc[2];\n    let delta_theta = cc[3];\n\n    // Split an arc to multiple segments, so each segment\n    // will be less than τ/4 (= 90°)\n    //\n    const segments = Math.max(Math.ceil(Math.abs(delta_theta) / (TAU / 4)), 1);\n    delta_theta /= segments;\n\n    for (let i = 0; i < segments; i++) {\n        result.push(approximate_unit_arc(theta1, delta_theta));\n        theta1 += delta_theta;\n    }\n\n    // We have a bezier approximation of a unit circle,\n    // now need to transform back to the original ellipse\n    //\n    return result.map(function (curve) {\n        for (let i = 0; i < curve.length; i += 2) {\n            let x = curve[i    ];\n            let y = curve[i + 1];\n\n            // scale\n            x *= rx;\n            y *= ry;\n\n            // rotate\n            const xp = cos_phi*x - sin_phi*y;\n            const yp = sin_phi*x + cos_phi*y;\n\n            // translate\n            curve[i    ] = xp + cc[0];\n            curve[i + 1] = yp + cc[1];\n        }\n\n        return curve;\n    });\n}"],"file":"easeljs-svg-path.js"}