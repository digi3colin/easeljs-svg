{"version":3,"sources":["UtilsSVG.jsx"],"names":[],"mappings":"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","file":"UtilsSVG.js","sourcesContent":["import arcToBezier from 'svg-arc-to-cubic-bezier';\n\nexport class UtilsSVG{\n\n  static parse(pathString){\n    return UtilsSVG.resolveRepeateCommand(\n      pathString\n        .match(/([astvzqmhlc])([^astvzqmhlc]*)/ig)\n        .map(command => [command.slice(0,1), command.match(/-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig)])\n        .map(command => [command[0]].concat((command[1] !== null) ? command[1].map(x => parseFloat(x)): []))\n    );\n  }\n\n  static resolveRepeateCommand(commands){\n    const lens = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0};\n    const result = [];\n\n    commands.forEach(command => {\n      const cmd = command[0].toLowerCase();\n      const len = lens[cmd];\n      if(len === 0)return result.push(command);\n\n      const args = command.splice(1);\n\n      if(args.length % len !== 0 ){\n        throw new Error('SVG path command argument number mismatch');\n      }\n\n      const setCount = args.length / len;\n\n      for(let i = 0; i < setCount; i++){\n        const subArgs = args.slice(i * len, i * len + len);\n        result.push([command[0]].concat(subArgs));\n      }\n    });\n\n    return result;\n  }\n\n  static toString(commands){\n    return commands\n      .map(cmd => cmd.join(' '))\n      .join(' ');\n  }\n\n  static pathBounds(absoluteCommands) {\n    let points = [];\n    let x, y = 0;\n\n    absoluteCommands.forEach(cmd => {\n      switch(cmd[0]){\n        case 'H':\n          x = cmd[1];\n          points.push([x, y]);\n          break;\n        case 'V':\n          y = cmd[1];\n          points.push([x, y]);\n          break;\n        case 'A':\n          x = cmd[6];\n          y = cmd[7];\n          points.push([x, y]);\n          break;\n        case 'C':\n          points.push([cmd[1], cmd[2]]);\n          points.push([cmd[3], cmd[4]]);\n\n          x = cmd[5];\n          y = cmd[6];\n          points.push([x, y]);\n          break;\n        case 'S':\n        case 'Q':\n          x = cmd[3];\n          y = cmd[4];\n          points.push([x, y]);\n          break;\n        case 'T':\n          x = cmd[1];\n          y = cmd[2];\n          points.push([x, y]);\n          break;\n\n        default:\n          for(let j = 1; j < cmd.length ; j += 2){\n            x = cmd[j];\n            y = cmd[j+1];\n            points.push([x, y]);\n          }\n      }\n    });\n\n    let minX = Number.POSITIVE_INFINITY;\n    let minY = Number.POSITIVE_INFINITY;\n    let maxX = Number.NEGATIVE_INFINITY;\n    let maxY = Number.NEGATIVE_INFINITY;\n\n    points.forEach(pt => {\n      if(minX > pt[0])minX = pt[0];\n      if(minY > pt[1])minY = pt[1];\n      if(maxX < pt[0])maxX = pt[0];\n      if(maxY < pt[1])maxY = pt[1];\n    });\n\n    return [minX, minY, maxX - minX, maxY - minY, points];\n  }\n\n//abs-svg-path\n  static abs(commands){\n    let startX, startY, x, y = 0;\n\n    return commands.map(seg => {\n      seg = seg.slice();\n      const type = seg[0];\n      const command = type.toUpperCase();\n\n      // is relative\n      if (type !== command) {\n        seg[0] = command;\n        switch (type) {\n          case 'a':\n            seg[6] += x;\n            seg[7] += y;\n            break;\n          case 'v':\n            seg[1] += y;\n            break;\n          case 'h':\n            seg[1] += x;\n            break;\n          default:\n            for (let i = 1; i < seg.length;) {\n              seg[i++] += x;\n              seg[i++] += y;\n            }\n        }\n      }\n\n      // update cursor state\n      switch (command) {\n        case 'A':\n          x = seg[6];\n          y = seg[7];\n          break;\n        case 'Z':\n          x = startX;\n          y = startY;\n          break;\n        case 'H':\n          x = seg[1];\n          break;\n        case 'V':\n          y = seg[1];\n          break;\n        case 'M':\n          x = startX = seg[1];\n          y = startY = seg[2];\n          break;\n        default:\n          x = seg[seg.length - 2];\n          y = seg[seg.length - 1];\n      }\n\n      return seg\n    })\n  }\n\n  static drawGraphics(graphics, pathString, scale=1){\n    let commands = UtilsSVG.abs(UtilsSVG.parse(pathString));\n    if(scale !== 1){\n      commands = commands.map(cmd => cmd.map((arg, i) => (i === 0) ? arg : arg * scale));\n    }\n\n    let bounds = UtilsSVG.pathBounds(commands);\n\n    let x, y = 0;\n    commands.forEach(cmd => {\n      switch(cmd[0]){\n        case 'A':\n\n          console.log(`\nrx ${cmd[1]} \nry ${cmd[2]}\nx-axis-rotation ${cmd[3] / scale}\nlarge-arc-flag ${cmd[4] / scale}\nsweep-flag ${cmd[5] / scale}\nx ${cmd[6]}\ny ${cmd[7]}\n`);\n\n          const b = arcToBezier({\n            px: x,\n            py: y,\n            cx: cmd[6],\n            cy: cmd[7],\n            rx: cmd[1],\n            ry: cmd[2],\n            xAxisRotation: cmd[3] / scale,\n            largeArcFlag: cmd[4] / scale,\n            sweepFlag: cmd[5] / scale,\n          })[0];\n\n          console.log(b.x);\n\n          graphics.bt(b.x1, b.y1, b.x2, b.y2, b.x, b.y);\n          x = cmd[6];\n          y = cmd[7];\n\n          break;\n        case 'C':\n          graphics.bt(cmd[1], cmd[2], cmd[3], cmd[4], cmd[5], cmd[6]);\n          x = cmd[5];\n          y = cmd[6];\n          break;\n        case 'H':\n          graphics.lt(cmd[1], y);\n          x = cmd[1];\n          break;\n        case 'L':\n          graphics.lt(cmd[1], cmd[2]);\n          x = cmd[1];\n          y = cmd[2];\n          break;\n        case 'M':\n          graphics.mt(cmd[1], cmd[2]);\n          x = cmd[1];\n          y = cmd[2];\n          break;\n        case 'Q':\n          graphics.qt(cmd[1], cmd[2], cmd[3], cmd[4]);\n          x = cmd[3];\n          y = cmd[4];\n          break;\n        case 'S':\n          console.log('SVG Path T to graphics not implemented');\n          break;\n        case 'T':\n          console.log('SVG Path T to graphics not implemented');\n          break;\n        case 'V':\n          graphics.lt(x, cmd[1]);\n          y = cmd[1];\n          break;\n        case 'Z':\n          graphics.cp();\n      }\n    });\n\n    return {graphics: graphics, bounds: bounds};\n  }\n}\n\n"]}